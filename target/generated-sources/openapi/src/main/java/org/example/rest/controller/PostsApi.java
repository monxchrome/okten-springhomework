/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.rest.controller;

import org.example.rest.model.PostDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-03T13:10:20.263226+01:00[Europe/Podgorica]")
@Validated
@Tag(name = "post", description = "the post API")
public interface PostsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /posts : Create post
     *
     * @param postDto Post to be created (required)
     * @return Post (status code 201)
     *         or Invalid request (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "createPost",
        summary = "Create post",
        tags = { "post" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Post", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<PostDto> createPost(
        @Parameter(name = "PostDto", description = "Post to be created", required = true) @Valid @RequestBody PostDto postDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"topic\" : \"Hello world\", \"description\" : \"Lorem Ipsum\", \"id\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /posts/{id} : Get specific post
     * Get post by id
     *
     * @param id Post ID (required)
     * @return Post (status code 200)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "getPost",
        summary = "Get specific post",
        description = "Get post by id",
        tags = { "post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/posts/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PostDto> getPost(
        @Parameter(name = "id", description = "Post ID", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"topic\" : \"Hello world\", \"description\" : \"Lorem Ipsum\", \"id\" : 10 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /posts : Get all posts
     * Fetch all existing posts
     *
     * @return Post list (status code 200)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "getPosts",
        summary = "Get all posts",
        description = "Fetch all existing posts",
        tags = { "post" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PostDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/posts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PostDto>> getPosts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"topic\" : \"Hello world\", \"description\" : \"Lorem Ipsum\", \"id\" : 10 }, { \"topic\" : \"Hello world\", \"description\" : \"Lorem Ipsum\", \"id\" : 10 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
