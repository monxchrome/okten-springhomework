/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.rest.controller;

import org.example.rest.model.RefreshDto;
import org.example.rest.model.SignInDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-28T08:58:20.077542+01:00[Europe/Podgorica]")
@Validated
@Tag(name = "auth", description = "the auth API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/auth/refresh : Refresh
     *
     * @param refreshDto Refresh (required)
     * @return Product list (status code 201)
     *         or Invalid request (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "refresh",
        summary = "Refresh",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RefreshDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<RefreshDto>> refresh(
        @Parameter(name = "RefreshDto", description = "Refresh", required = true) @Valid @RequestBody RefreshDto refreshDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"refreshToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.pDtE-M44fneD--ljZ9PY3hjPF5HlkNd64_s9w5QdEls\" }, { \"refreshToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.pDtE-M44fneD--ljZ9PY3hjPF5HlkNd64_s9w5QdEls\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/auth/signin : Sign In
     *
     * @param signInDto Sign In (required)
     * @return Product list (status code 201)
     *         or Invalid request (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "signIn",
        summary = "Sign In",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product list", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SignInDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/signin",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<List<SignInDto>> signIn(
        @Parameter(name = "SignInDto", description = "Sign In", required = true) @Valid @RequestBody SignInDto signInDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"refreshToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.pDtE-M44fneD--ljZ9PY3hjPF5HlkNd64_s9w5QdEls\" }, { \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\", \"refreshToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.pDtE-M44fneD--ljZ9PY3hjPF5HlkNd64_s9w5QdEls\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
